CREATE OR REPLACE FUNCTION F(PARAM INT)
	RETURNS INT AS
	'
	DECLARE COUNT_OF_PEOPLE INT;
	BEGIN
		SELECT COUNT(E.SALARY) INTO COUNT_OF_PEOPLE
		FROM EMPLOYEE E
		WHERE E.SALARY=PARA;
	END;
	'LANGUAGE PLPGSQL;

DROP FUNCTION F(PARAM INT)


--SUM OF TWO INTS WITH RETURN
CREATE OR REPLACE FUNCTION FSUMTWO(NUM1 INT, NUM2 INT) RETURNS INT AS'
	DECLARE SUMM INT;
	BEGIN
		SUMM:=NUM1+NUM2;
		RETURN SUMM;
	END;
'LANGUAGE PLPGSQL;


--SUM OF TWO INTS WITH OUT
CREATE OR REPLACE FUNCTION SUMTWO(NUM1 NUMERIC, NUM2 NUMERIC, OUT SNUM NUMERIC)
	AS'
	BEGIN
		SNUM:=NUM1+NUM2;
	END;
	'LANGUAGE PLPGSQL;


SELECT FSUMTWO(1, 2), SUMTWO(5, -20);


--Adı verilen bir departmandaki çalışanların ortalama maaşını bulan bir fonksiyon yazınız.
CREATE OR REPLACE FUNCTION AVGSALARY(DEPNAME DEPARTMENT.DNAME%TYPE) RETURNS INT AS '
	DECLARE R INT;
	BEGIN
		SELECT AVG(SALARY) INTO R
		FROM DEPARTMENT D, EMPLOYEE E
		WHERE D.DNAME=DEPNAME AND E.DNO=D.DNUMBER;
		RETURN R;
	END;'LANGUAGE PLPGSQL;

SELECT AVGSALARY('Software'), AVGSALARY('Hardware')


--Departman tablosundaki minimum ve maksimum departman numarasını bulup min_deptno ve max_deptno değişkenlerine atan fonksiyonu yazınız.
CREATE OR REPLACE FUNCTION MINMAXDNO(OUT DNOMIN DEPARTMENT.DNUMBER%TYPE, OUT DNOMAX DEPARTMENT.DNUMBER%TYPE) AS'
	BEGIN
		SELECT MIN(DNUMBER), MAX(DNUMBER) INTO DNOMIN, DNOMAX
		FROM DEPARTMENT;
	END;'LANGUAGE PLPGSQL;

SELECT MINMAXDNO();

--6 no’lu departmanda çalışanların sayısı 10’dan azsa departmandaki tüm çalışanların maaşına %5 zam yapın.
CREATE OR REPLACE FUNCTION ZAM() RETURNS VOID AS '
	DECLARE COUNT_OF_WORKERS INT;
	BEGIN
		SELECT COUNT(DNO) INTO COUNT_OF_WORKERS
		FROM EMPLOYEE
		WHERE DNO=6;

		IF (COUNT_OF_WORKERS < 10) THEN
			UPDATE EMPLOYEE SET SALARY=SALARY*1.05 WHERE DNO=6;
		END IF;
	END;'LANGUAGE PLPGSQL;
SELECT ZAM();

--İsmi verilen bir departmanda çalışanların ortalama maaşı, verilen bir değerden düşük ve
--o departmandaki kadın çalışanların maaşlarının toplamı verilen bir limitin üstündeyse, o departmanda 1’den fazla projede çalışanların maaşlarına 
--yine verilen bir oranda zam yapan fonksiyonu yazınız.
CREATE OR REPLACE FUNCTION MASTERPIECE(DEPNAME DEPARTMENT.DNAME%TYPE, DEGER INT, LMT INT, ORAN NUMERIC) RETURNS VOID AS $$
	DECLARE
		DEGER_FOUND INT;
		LMT_FOUND INT;
	BEGIN
		SELECT AVG(E1.SALARY), SUM(E2.SALARY) INTO DEGER_FOUND, LMT_FOUND
		FROM	EMPLOYEE E1, DEPARTMENT D, EMPLOYEE E2
		WHERE D.DNAME=DEPNAME AND D.DNUMBER=E1.DNO AND E1.SSN=E2.SSN AND E2.SEX='F';
		
		IF DEGER_FOUND<DEGER AND LMT_FOUND>LMT THEN
			UPDATE EMPLOYEE
			SET SALARY=SALARY*ORAN/100+SALARY
			WHERE SSN=(SELECT SSN FROM DEPARTMENT, WORKS_ON, EMPLOYEE WHERE DNAME=DEPNAME AND DNUMBER=DNO AND SSN=ESSN GROUP BY ESSN HAVING COUNT(*)>1);
		END IF;
	END;$$ LANGUAGE PLPGSQL;

DROP FUNCTION MASTERPIECE(DEPARTMENT.DNAME%TYPE, INT, INT, NUMERIC);
SELECT MASTERPIECE('SALES', 5, 5, 1);

IF-ELSIF-ELSE örnek
IF number = 0 THEN
result := 'zero';
ELSIF number > 0 THEN
result := 'positive';
ELSIF number < 0 THEN
result := 'negative';
ELSE
result := 'NULL';
END IF;


CASE x
WHEN 1, 2 THEN
msg := 'one or two';
WHEN 3,4 THEN
msg := 'three or four';
ELSE
msg := 'other value';
END CASE;

WHILE dongu_kosulu LOOP
	yapilacaklar…
	END LOOP;

FOR sayac IN başlangıç..bitiş
	LOOP
		Kodlar……
	END LOOP;

FOR sayac IN başlangıç..bitiş BY kaçar
	LOOP
		Kodlar……
	END LOOP;

FOR sayac IN REVERSE başlangıç..bitiş BY kaçar
	LOOP
		Kodlar……
	END LOOP;


DO $$
	BEGIN
		FOR x IN REVERSE 5 .. 1 BY 2
		LOOP
			RAISE NOTICE 'Sayı: %', x;
		END LOOP;
END; $$














